/* Generated By:JavaCC: Do not edit this line. MediawikiScanner.java */
package mo.umac.wikianalysis.lexer;
import java.io.*;
import java.util.*;

public class MediawikiScanner implements MediawikiScannerConstants {
        public ArrayList < WikiToken > tokens;

        public static void main(String [] args) throws ParseException, TokenMgrError
        {
                try
                {
                        Reader in = new InputStreamReader(new FileInputStream("/home/peter/Desktop/Examples/newText.txt"), "UTF-8");
                        BufferedReader oldFile = new BufferedReader(in);
                        MediawikiScanner parser = new MediawikiScanner(oldFile);
                        parser.tokens = new ArrayList < WikiToken > ();
                        parser.parse();
                        System.out.println(parser.tokens);
                        oldFile.close();
                }
                catch (FileNotFoundException e)
                {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                }
                catch (IOException e)
                {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                }
        }

        public void parse() throws ParseException
        {
                doParse();
        }

        public WikiToken [] getTokens()
        {
                WikiToken [] a = new WikiToken [tokens.size()];
                tokens.toArray(a);
                return a;
        }

  final public Token getTABLE_BEGIN() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_TABLE_BEGIN:
      t = jj_consume_token(I_TABLE_BEGIN);
      break;
    case D_TABLE_BEGIN:
      t = jj_consume_token(D_TABLE_BEGIN);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getTABLE_END() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_TABLE_END:
      t = jj_consume_token(I_TABLE_END);
      break;
    case D_TABLE_END:
      t = jj_consume_token(D_TABLE_END);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getTABLE_CAPTION() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_TABLE_CAPTION:
      t = jj_consume_token(I_TABLE_CAPTION);
      break;
    case D_TABLE_CAPTION:
      t = jj_consume_token(D_TABLE_CAPTION);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getTABLE_ROW() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_TABLE_ROW:
      t = jj_consume_token(I_TABLE_ROW);
      break;
    case D_TABLE_ROW:
      t = jj_consume_token(D_TABLE_ROW);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getTABLE_CELL() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_TABLE_CELL:
      t = jj_consume_token(I_TABLE_CELL);
      break;
    case D_TABLE_CELL:
      t = jj_consume_token(D_TABLE_CELL);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getTABLE_CELL_NL() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_TABLE_CELL_NL:
      t = jj_consume_token(I_TABLE_CELL_NL);
      break;
    case D_TABLE_CELL_NL:
      t = jj_consume_token(D_TABLE_CELL_NL);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getLIST_ITEM() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_LIST_ITEM:
      t = jj_consume_token(I_LIST_ITEM);
      break;
    case D_LIST_ITEM:
      t = jj_consume_token(D_LIST_ITEM);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getHEADER_BEGIN() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_HEADER_BEGIN:
      t = jj_consume_token(I_HEADER_BEGIN);
      break;
    case D_HEADER_BEGIN:
      t = jj_consume_token(D_HEADER_BEGIN);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getHORLINE() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_HORLINE:
      t = jj_consume_token(I_HORLINE);
      break;
    case D_HORLINE:
      t = jj_consume_token(D_HORLINE);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token getHEADER_END() throws ParseException {
        Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_HEADER_END:
      t = jj_consume_token(I_HEADER_END);
      break;
    case D_HEADER_END:
      t = jj_consume_token(D_HEADER_END);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token symbol() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYMBOL:
      t = jj_consume_token(SYMBOL);
      break;
    case EXT_LINK_BEGIN:
      t = jj_consume_token(EXT_LINK_BEGIN);
      break;
    case EXT_LINK_END:
      t = jj_consume_token(EXT_LINK_END);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public void doParse() throws ParseException {
        token_source.SwitchTo(token_source.INITIAL_CONTEXT);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case URI:
      case I_TABLE_BEGIN:
      case I_TABLE_END:
      case I_TABLE_CAPTION:
      case I_TABLE_ROW:
      case I_TABLE_CELL:
      case I_TABLE_CELL_NL:
      case I_LIST_ITEM:
      case I_HEADER_BEGIN:
      case I_HORLINE:
      case I_HEADER_END:
      case D_TABLE_BEGIN:
      case D_TABLE_END:
      case D_TABLE_CAPTION:
      case D_TABLE_ROW:
      case D_TABLE_CELL:
      case D_TABLE_CELL_NL:
      case D_LIST_ITEM:
      case D_HEADER_BEGIN:
      case D_HORLINE:
      case D_HEADER_END:
      case IMAGE_BEGIN:
      case TEMPLATE_BEGIN:
      case TEMPLATE_END:
      case SPACES:
      case WORD:
      case SYMBOL:
      case NL:
      case REF_EMPTY:
      case REF_BEGIN:
      case REF_END:
      case TAG_EMPTY:
      case TAG_BEGIN:
      case TAG_END:
      case BOLD:
      case ITALIC:
      case INT_LINK_BEGIN:
      case EXT_LINK_BEGIN:
      case HTML_ENTITY:
      case EXT_LINK_END:
      case INT_LINK_PREFIX:
      case INT_LINK_SEPARATOR:
      case INT_LINK_SPACES:
      case INT_LINK_CONTENT:
      case INT_LINK_SYMBOL:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_1;
      }
      contents();
    }
    jj_consume_token(0);
  }

  final public void contents() throws ParseException {
        Token t;
        WikiToken tt;
    if (jj_2_1(2147483647)) {
      table();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case URI:
      case I_LIST_ITEM:
      case I_HEADER_BEGIN:
      case I_HORLINE:
      case I_HEADER_END:
      case D_LIST_ITEM:
      case D_HEADER_BEGIN:
      case D_HORLINE:
      case D_HEADER_END:
      case IMAGE_BEGIN:
      case TEMPLATE_BEGIN:
      case TEMPLATE_END:
      case SPACES:
      case WORD:
      case SYMBOL:
      case NL:
      case REF_EMPTY:
      case REF_BEGIN:
      case REF_END:
      case TAG_EMPTY:
      case TAG_BEGIN:
      case TAG_END:
      case BOLD:
      case ITALIC:
      case INT_LINK_BEGIN:
      case EXT_LINK_BEGIN:
      case HTML_ENTITY:
      case EXT_LINK_END:
      case INT_LINK_PREFIX:
      case INT_LINK_CONTENT:
        content();
        break;
      case I_TABLE_BEGIN:
      case I_TABLE_END:
      case I_TABLE_CAPTION:
      case I_TABLE_ROW:
      case I_TABLE_CELL:
      case I_TABLE_CELL_NL:
      case D_TABLE_BEGIN:
      case D_TABLE_END:
      case D_TABLE_CAPTION:
      case D_TABLE_ROW:
      case D_TABLE_CELL:
      case D_TABLE_CELL_NL:
      case INT_LINK_SEPARATOR:
      case INT_LINK_SYMBOL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case I_TABLE_BEGIN:
        case D_TABLE_BEGIN:
          t = getTABLE_BEGIN();
          break;
        case I_TABLE_CAPTION:
        case D_TABLE_CAPTION:
          t = getTABLE_CAPTION();
          break;
        case I_TABLE_ROW:
        case D_TABLE_ROW:
          t = getTABLE_ROW();
          break;
        case I_TABLE_CELL:
        case D_TABLE_CELL:
          t = getTABLE_CELL();
          break;
        case I_TABLE_CELL_NL:
        case D_TABLE_CELL_NL:
          t = getTABLE_CELL_NL();
          break;
        case I_TABLE_END:
        case D_TABLE_END:
          t = getTABLE_END();
          break;
        case INT_LINK_SYMBOL:
          t = jj_consume_token(INT_LINK_SYMBOL);
          break;
        case INT_LINK_SEPARATOR:
          t = jj_consume_token(INT_LINK_SEPARATOR);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                tt = new WikiToken(MediawikiScannerConstants.SYMBOL, new String(t.image));
                tokens.add(tt);
        break;
      case INT_LINK_SPACES:
        t = jj_consume_token(INT_LINK_SPACES);
                tt = new WikiToken(MediawikiScannerConstants.SPACES, new String(t.image));
                tokens.add(tt);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void content() throws ParseException {
        Token t;
        WikiToken tt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMAGE_BEGIN:
      image();
      break;
    case TEMPLATE_BEGIN:
    case TEMPLATE_END:
      template();
      break;
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_2(2147483647)) {
        intLink();
      } else if (jj_2_3(2147483647)) {
        extLink();
      } else if (jj_2_4(2147483647)) {
        header();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case URI:
        case I_LIST_ITEM:
        case I_HORLINE:
        case D_LIST_ITEM:
        case D_HORLINE:
        case SPACES:
        case WORD:
        case SYMBOL:
        case NL:
        case REF_EMPTY:
        case REF_BEGIN:
        case REF_END:
        case TAG_EMPTY:
        case TAG_BEGIN:
        case TAG_END:
        case BOLD:
        case ITALIC:
        case HTML_ENTITY:
          line();
          break;
        case I_HEADER_BEGIN:
        case I_HEADER_END:
        case D_HEADER_BEGIN:
        case D_HEADER_END:
        case INT_LINK_BEGIN:
        case EXT_LINK_BEGIN:
        case EXT_LINK_END:
        case INT_LINK_PREFIX:
        case INT_LINK_CONTENT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXT_LINK_BEGIN:
            t = jj_consume_token(EXT_LINK_BEGIN);
            break;
          case EXT_LINK_END:
            t = jj_consume_token(EXT_LINK_END);
            break;
          case INT_LINK_BEGIN:
            t = jj_consume_token(INT_LINK_BEGIN);
            break;
          case INT_LINK_PREFIX:
            t = jj_consume_token(INT_LINK_PREFIX);
            break;
          case INT_LINK_CONTENT:
            t = jj_consume_token(INT_LINK_CONTENT);
            break;
          case I_HEADER_BEGIN:
          case D_HEADER_BEGIN:
            t = getHEADER_BEGIN();
            break;
          case I_HEADER_END:
          case D_HEADER_END:
            t = getHEADER_END();
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                        char[] symArray = t.image.trim().toCharArray();
                        for (int i = 0; i < symArray.length; i++)
                        {
                                tt = new WikiToken(MediawikiScannerConstants.SYMBOL, new String(Character.toString(symArray [ i ])));
                                tokens.add(tt);
                        }
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void line() throws ParseException {
        Token t;
        WikiToken tt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_HORLINE:
    case D_HORLINE:
      t = getHORLINE();
                tt = new WikiToken(t.kind, new String(t.image.trim()), t.image);
                tokens.add(tt);
      break;
    case I_LIST_ITEM:
    case D_LIST_ITEM:
      t = getLIST_ITEM();
                tt = new WikiToken(t.kind, new String(t.image.trim()), t.image);
                tokens.add(tt);
      break;
    case BOLD:
      t = jj_consume_token(BOLD);
                tokens.add(new WikiToken(t));
      break;
    case ITALIC:
      t = jj_consume_token(ITALIC);
                tokens.add(new WikiToken(t));
      break;
    case URI:
    case WORD:
    case SYMBOL:
    case HTML_ENTITY:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WORD:
        t = jj_consume_token(WORD);
        break;
      case HTML_ENTITY:
        t = jj_consume_token(HTML_ENTITY);
        break;
      case URI:
        t = jj_consume_token(URI);
        break;
      case SYMBOL:
        t = jj_consume_token(SYMBOL);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                tokens.add(new WikiToken(t));
      break;
    case SPACES:
      t = jj_consume_token(SPACES);
                if (tokens.size() > 0)
                {
                        tt = tokens.get(tokens.size() - 1);
                        tt.displayString += t.image;
                        tokens.set(tokens.size() - 1, tt);
                }
      break;
    case REF_EMPTY:
    case REF_BEGIN:
    case REF_END:
    case TAG_EMPTY:
    case TAG_BEGIN:
    case TAG_END:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REF_EMPTY:
        t = jj_consume_token(REF_EMPTY);
        break;
      case REF_BEGIN:
        t = jj_consume_token(REF_BEGIN);
        break;
      case REF_END:
        t = jj_consume_token(REF_END);
        break;
      case TAG_EMPTY:
        t = jj_consume_token(TAG_EMPTY);
        break;
      case TAG_BEGIN:
        t = jj_consume_token(TAG_BEGIN);
        break;
      case TAG_END:
        t = jj_consume_token(TAG_END);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        tokens.add(new WikiToken(t));
      break;
    case NL:
      t = jj_consume_token(NL);
                if (tokens.size() > 0)
                {
                        tt = tokens.get(tokens.size() - 1);
                        if (tt.kind == MediawikiScannerConstants.NL)
                        {
                                tt.displayString += t.image;
                                tokens.set(tokens.size() - 1, tt);
                        }
                        else
                                tokens.add(new WikiToken(t));
                }
                else
                        tokens.add(new WikiToken(t));
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void template() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEMPLATE_BEGIN:
      t = jj_consume_token(TEMPLATE_BEGIN);
                tokens.add(new WikiToken(t));
      break;
    case TEMPLATE_END:
      t = jj_consume_token(TEMPLATE_END);
                tokens.add(new WikiToken(t));
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void image() throws ParseException {
        Token t;
        WikiToken tt;
        String str;
        int prefixLen;
    t = jj_consume_token(IMAGE_BEGIN);
                if (t.image.toLowerCase().startsWith("[[image:")) prefixLen = 8;
                else prefixLen = 7;
                tt = new WikiToken(t.kind, new String(t.image.substring(prefixLen)), t.image);
                tokens.add(tt);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMAGE_ATTR:
      case IMAGE_CAPTION_BEGIN:
      case IMAGE_WORD:
      case IMAGE_NL:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMAGE_ATTR:
        t = jj_consume_token(IMAGE_ATTR);
                        tt = new WikiToken(t.kind, new String(t.image.substring(1)), t.image);
                        tokens.add(tt);
        break;
      case IMAGE_CAPTION_BEGIN:
        t = jj_consume_token(IMAGE_CAPTION_BEGIN);
                tokens.add(new WikiToken(t));
        break;
      case IMAGE_WORD:
        t = jj_consume_token(IMAGE_WORD);
                tokens.add(new WikiToken(MediawikiScannerConstants.WORD, new String(t.image)));
        break;
      case IMAGE_NL:
        t = jj_consume_token(IMAGE_NL);
                tokens.add(new WikiToken(MediawikiScannerConstants.NL, new String(t.image)));
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_6(3)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMAGE_END:
        jj_consume_token(IMAGE_END);
        break;
      case EXT_LINK_END:
        jj_consume_token(EXT_LINK_END);
        jj_consume_token(EXT_LINK_END);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        tokens.add(new WikiToken(MediawikiScannerConstants.IMAGE_END, new String("]]")));
    } else {
      label_3:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_3;
        }
        content();
      }
    }
  }

  final public void intLink() throws ParseException {
        Token t;
        WikiToken tt, colon;
        boolean prefixed = false;
    t = jj_consume_token(INT_LINK_BEGIN);
                tokens.add(new WikiToken(t));
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_LINK_PREFIX:
      case INT_LINK_SEPARATOR:
      case INT_LINK_SPACES:
      case INT_LINK_CONTENT:
      case INT_LINK_SYMBOL:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT_LINK_PREFIX:
        t = jj_consume_token(INT_LINK_PREFIX);
                        if (!prefixed)
                        {
                                tokens.add(new WikiToken(t));
                                prefixed = true;
                        }
                        else
                        {
                                tt = new WikiToken(MediawikiScannerConstants.WORD, new String(t.image.replace(':', ' ').trim()));
                                tokens.add(tt);
                                colon = new WikiToken(MediawikiScannerConstants.SYMBOL, new String(":"));
                                tokens.add(colon);
                        }
        break;
      case INT_LINK_CONTENT:
        t = jj_consume_token(INT_LINK_CONTENT);
                        prefixed = true;
                        tt = new WikiToken(MediawikiScannerConstants.WORD, new String(t.image));
                        tokens.add(tt);
        break;
      case INT_LINK_SYMBOL:
        t = jj_consume_token(INT_LINK_SYMBOL);
                        prefixed = true;
                        tt = new WikiToken(MediawikiScannerConstants.SYMBOL, new String(t.image));
                        tokens.add(tt);
        break;
      case INT_LINK_SPACES:
        t = jj_consume_token(INT_LINK_SPACES);
                        prefixed = true;
                        tt = tokens.get(tokens.size() - 1);
                        tt.displayString += t.image;
                        tokens.set(tokens.size() - 1, tt);
        break;
      case INT_LINK_SEPARATOR:
        t = jj_consume_token(INT_LINK_SEPARATOR);
                        prefixed = true;
                        tokens.add(new WikiToken(t));
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_LINK_END:
      t = jj_consume_token(INT_LINK_END);
                tokens.add(new WikiToken(t));
      break;
    case EXT_LINK_END:
      t = jj_consume_token(EXT_LINK_END);
                tokens.add(new WikiToken(MediawikiScannerConstants.INT_LINK_END, new String(t.image)));
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void extLink() throws ParseException {
        Token t;
        WikiToken tt;
    t = jj_consume_token(EXT_LINK_BEGIN);
                tokens.add(new WikiToken(t));
    t = jj_consume_token(URI);
                tokens.add(new WikiToken(t));
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case URI:
      case I_LIST_ITEM:
      case I_HORLINE:
      case D_LIST_ITEM:
      case D_HORLINE:
      case SPACES:
      case WORD:
      case SYMBOL:
      case NL:
      case REF_EMPTY:
      case REF_BEGIN:
      case REF_END:
      case TAG_EMPTY:
      case TAG_BEGIN:
      case TAG_END:
      case BOLD:
      case ITALIC:
      case INT_LINK_BEGIN:
      case EXT_LINK_BEGIN:
      case HTML_ENTITY:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case URI:
      case I_LIST_ITEM:
      case I_HORLINE:
      case D_LIST_ITEM:
      case D_HORLINE:
      case SPACES:
      case WORD:
      case SYMBOL:
      case NL:
      case REF_EMPTY:
      case REF_BEGIN:
      case REF_END:
      case TAG_EMPTY:
      case TAG_BEGIN:
      case TAG_END:
      case BOLD:
      case ITALIC:
      case HTML_ENTITY:
        line();
        break;
      case INT_LINK_BEGIN:
      case EXT_LINK_BEGIN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXT_LINK_BEGIN:
          t = jj_consume_token(EXT_LINK_BEGIN);
          break;
        case INT_LINK_BEGIN:
          t = jj_consume_token(INT_LINK_BEGIN);
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                        tt = new WikiToken(MediawikiScannerConstants.SYMBOL, new String(t.image));
                        tokens.add(tt);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    t = jj_consume_token(EXT_LINK_END);
                tokens.add(new WikiToken(t));
  }

  final public void table() throws ParseException {
        Token t = null;
    t = getTABLE_BEGIN();
                tokens.add(new WikiToken(t));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case I_TABLE_CAPTION:
    case D_TABLE_CAPTION:
      t = getTABLE_CAPTION();
                        tokens.add(new WikiToken(t));
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case I_TABLE_CELL_NL:
      case D_TABLE_CELL_NL:
        tableRow();
        break;
      case I_TABLE_ROW:
      case D_TABLE_ROW:
        t = getTABLE_ROW();
                        tokens.add(new WikiToken(t));
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case I_TABLE_ROW:
      case I_TABLE_CELL_NL:
      case D_TABLE_ROW:
      case D_TABLE_CELL_NL:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_6;
      }
    }
    t = getTABLE_END();
                tokens.add(new WikiToken(t));
  }

  final public void tableRow() throws ParseException {
        Token t = null;
    t = getTABLE_CELL_NL();
                String str = t.image.trim();
                boolean head = str.startsWith("!");
                tokens.add(new WikiToken(t, t.image));
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case URI:
      case I_TABLE_BEGIN:
      case I_TABLE_CELL:
      case I_LIST_ITEM:
      case I_HEADER_BEGIN:
      case I_HORLINE:
      case I_HEADER_END:
      case D_TABLE_BEGIN:
      case D_TABLE_CELL:
      case D_LIST_ITEM:
      case D_HEADER_BEGIN:
      case D_HORLINE:
      case D_HEADER_END:
      case IMAGE_BEGIN:
      case TEMPLATE_BEGIN:
      case TEMPLATE_END:
      case SPACES:
      case WORD:
      case SYMBOL:
      case NL:
      case REF_EMPTY:
      case REF_BEGIN:
      case REF_END:
      case TAG_EMPTY:
      case TAG_BEGIN:
      case TAG_END:
      case BOLD:
      case ITALIC:
      case INT_LINK_BEGIN:
      case EXT_LINK_BEGIN:
      case HTML_ENTITY:
      case EXT_LINK_END:
      case INT_LINK_PREFIX:
      case INT_LINK_CONTENT:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_7;
      }
      if (jj_2_7(2147483647)) {
        table();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case I_TABLE_CELL:
        case D_TABLE_CELL:
          t = getTABLE_CELL();
                        tokens.add(new WikiToken(t));
          break;
        case URI:
        case I_LIST_ITEM:
        case I_HEADER_BEGIN:
        case I_HORLINE:
        case I_HEADER_END:
        case D_LIST_ITEM:
        case D_HEADER_BEGIN:
        case D_HORLINE:
        case D_HEADER_END:
        case IMAGE_BEGIN:
        case TEMPLATE_BEGIN:
        case TEMPLATE_END:
        case SPACES:
        case WORD:
        case SYMBOL:
        case NL:
        case REF_EMPTY:
        case REF_BEGIN:
        case REF_END:
        case TAG_EMPTY:
        case TAG_BEGIN:
        case TAG_END:
        case BOLD:
        case ITALIC:
        case INT_LINK_BEGIN:
        case EXT_LINK_BEGIN:
        case HTML_ENTITY:
        case EXT_LINK_END:
        case INT_LINK_PREFIX:
        case INT_LINK_CONTENT:
          content();
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void header() throws ParseException {
        Token t;
        WikiToken tt;
    t = getHEADER_BEGIN();
                tt = new WikiToken(t.kind, new String(t.image.trim()), t.image);
                tokens.add(tt);
    label_8:
    while (true) {
      line();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case URI:
      case I_LIST_ITEM:
      case I_HORLINE:
      case D_LIST_ITEM:
      case D_HORLINE:
      case SPACES:
      case WORD:
      case SYMBOL:
      case NL:
      case REF_EMPTY:
      case REF_BEGIN:
      case REF_END:
      case TAG_EMPTY:
      case TAG_BEGIN:
      case TAG_END:
      case BOLD:
      case ITALIC:
      case HTML_ENTITY:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_8;
      }
    }
    t = getHEADER_END();
                tt = new WikiToken(t.kind, new String(t.image.trim()), t.image);
                tokens.add(tt);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3R_24() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(IMAGE_CAPTION_BEGIN)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(IMAGE_ATTR)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_23()) return true;
    Token xsp;
    if (jj_3R_24()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(IMAGE_BEGIN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(TEMPLATE_END)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(TEMPLATE_BEGIN)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) return true;
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(NL)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_15()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_17()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(SPACES)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(ITALIC)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(EXT_LINK_BEGIN)) return true;
    if (jj_scan_token(URI)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(EXT_LINK_END)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(BOLD)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(EXT_LINK_END)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) return true;
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(INT_LINK_END)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(INT_LINK_SEPARATOR)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(INT_LINK_SPACES)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(INT_LINK_SYMBOL)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(INT_LINK_CONTENT)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) return true;
    }
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(INT_LINK_PREFIX)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) return true;
    }
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(INT_LINK_BEGIN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_19()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(EXT_LINK_END)) return true;
    if (jj_scan_token(EXT_LINK_END)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(IMAGE_NL)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(IMAGE_WORD)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MediawikiScannerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[36];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x200000,0x0,0x0,0x200000,0x200000,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x200000,0x0,0x0,0x0,0x200000,0x200000,0x200000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4010000,0x8020000,0x10040000,0x20080000,0x40100000,0x80200000,0x400000,0x800000,0x1000000,0x2000000,0x0,0xffff0000,0xfc3f0000,0xffff0000,0x2800000,0x0,0x3c00000,0x0,0x0,0x1400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1400000,0x0,0x1400000,0x10040000,0xa0280000,0xa0280000,0x47d10000,0x43d00000,0x1400000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x2,0x4,0x8,0xa004000,0x7ffffe0f,0x20000000,0x7ffffe0f,0x1b00000a,0xe00,0x1ffff00f,0x4006000,0x3f0000,0x4fff005,0xc00,0xf0,0xf0,0x8000100,0x70000000,0x70000000,0x88000000,0x7fff005,0x3000000,0x7fff005,0x0,0x0,0x0,0x1ffffe0f,0x1ffffe0f,0x4fff005,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x2,0x3,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MediawikiScanner(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MediawikiScanner(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MediawikiScannerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MediawikiScanner(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MediawikiScannerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MediawikiScanner(MediawikiScannerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MediawikiScannerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[98];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 36; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 98; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
